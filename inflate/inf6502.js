// inflate_addr is 508 bytes of code and constants
// inflate_data is 765 bytes of uninitialized data
// inflate_zp is 10 bytes on page zero
const input_addr = 0x1000;
const output_addr = 0x4000;
const inflate_addr = 0xb700;
const inflate_data = 0xb900;
const inflate_zp = 0xf0;

// Pointer to compressed data
const inputPointer                    =	inflate_zp;    // 2 bytes

// Pointer to uncompressed data
const outputPointer                   =	inflate_zp+2;  // 2 bytes

// Local variables

const getBit_buffer                   =	inflate_zp+4;  // 1 byte

const getBits_base                    =	inflate_zp+5;  // 1 byte
const inflateStored_pageCounter       =	inflate_zp+5;  // 1 byte

const inflateCodes_sourcePointer      =	inflate_zp+6;  // 2 bytes
const inflateDynamic_symbol           =	inflate_zp+6;  // 1 byte
const inflateDynamic_lastLength       =	inflate_zp+7;  // 1 byte
const inflateDynamic_tempCodes        =	inflate_zp+7;  // 1 byte

const inflateCodes_lengthMinus2       =	inflate_zp+8;  // 1 byte
const inflateDynamic_allCodes         =	inflate_zp+8;  // 1 byte

const inflateDynamic_primaryCodes     =	inflate_zp+9;  // 1 byte

// Argument values for getBits
const GET_1_BIT                       =	0x81;
const GET_2_BITS                      =	0x82;
const GET_3_BITS                      =	0x84;
const GET_4_BITS                      =	0x88;
const GET_5_BITS                      =	0x90;
const GET_6_BITS                      =	0xa0;
const GET_7_BITS                      =	0xc0;

// Huffman trees
const TREE_SIZE                       =	16;
const PRIMARY_TREE                    =	0;
const DISTANCE_TREE                   =	TREE_SIZE;

// Alphabet
const LENGTH_SYMBOLS                  =	1+29+2;
const DISTANCE_SYMBOLS                =	30;
const CONTROL_SYMBOLS                 =	LENGTH_SYMBOLS+DISTANCE_SYMBOLS;

const buffer = new ArrayBuffer(65536);
const mem8 = new Uint8Array(buffer);
const dv = new DataView(buffer);
const N = 0x20;
const Z = 0x10;
const C = 0x08;
let label = 0;
let a = 0;
let x = 0;
let y = 0;
let p = 0;
let stack = [];

function setc(val) { if (val) p |= C; else p &= ~C; }
function setnz(val) {
  if (val == 0) p |= Z; else p &= ~Z;
  if (val & 0x80) p |= N; else p &= ~N;
}

function ind(addr) {
  return dv.getUint16(addr,true);
}

function adc_imm(imm) {
  imm &= 0xff;
  const sum = a + imm + cs();
  a = sum & 0xff;
  setnz(a);
  setc(sum >= 0x100);
}

function adc(addr,offs=0) {
  const old = mem8[addr+offs];
  const sum = a + old + cs();
  a = sum & 0xff;
  setnz(a);
  setc(sum >= 0x100);
}

function add(addr,offs=0) {
  clc();
  adc(addr, offs);
}

function and_imm(imm) {
  imm &= 0xff;
  a = a & imm;
  setnz(a);
}

function clc() {
  setc(0);
}

function cmp_imm(imm) {
  imm &= 0xff;
  setnz((a - imm) & 0xff);
  setc(a >= imm);
}

function cpx_imm(imm) {
  imm &= 0xff;
  setnz((x - imm) & 0xff);
  setc(x >= imm);
}

function cpx(addr) {
  const val = mem8[addr];
  setnz((x - val) & 0xff);
  setc(x >= val);
}

function cpy_imm(imm) {
  imm &= 0xff;
  setnz((y - imm) & 0xff);
  setc(y >= imm);
}

function dec(addr,offs=0) {
  mem8[addr+offs]--;
  setnz(mem8[addr+offs]);
}

function dex() {
  x = (x + 0xff) & 0xff;
  setnz(x);
}

function dey() {
  y = (y + 0xff) & 0xff;
  setnz(y);
}

function eor(imm) {
  imm &= 0xff;
  a = a ^ imm;
  setnz(a);
}

function inc(addr,offs=0) {
  mem8[addr+offs]++;
  setnz(mem8[addr+offs]);
}

function inx() {
  x = (x + 1) & 0xff;
  setnz(x);
}

function iny() {
  y = (y + 1) & 0xff;
  setnz(y);
}

// see https://github.com/pfusik/xasm/blob/master/xasm.1.asciidoc
function inw(addr) {
  inc(addr);
  sne(() => inc(addr+1));
}

function jsr(l) {
  switch (l) {
    case getBits:
    case getWord:
    case getByte:
    case getAMinus1BitsMax8:
    case getBits_loop:
      F_getAMinus1BitsMax8(l);
      break;

    case copyByte:
    case storeByte:
      F_copyByte(l);
      break;

    case buildHuffmanTree:
    case buildTempHuffmanTree:
      F_buildTempHuffmanTree(l);
      break;

    case fetchCode:
    case fetchPrimaryCode:
      F_fetchPrimaryCode(l);
      break;

    case getBit:
      F_getBit(l);
      break;
  }
}

function lda_imm(imm) {
  imm &= 0xff;
  a = imm;
  setnz(a);
}

function lda(addr,offs=0) {
  a = mem8[addr+offs];
  setnz(a);
}

function ldx_imm(imm) {
  imm &= 0xff;
  x = imm;
  setnz(x);
}

function ldx(addr,offs=0) {
  x = mem8[addr+offs];
  setnz(x);
}

function ldy_imm(imm) {
  imm &= 0xff;
  y = imm;
  setnz(y);
}

function ldy(addr,offs=0) {
  y = mem8[addr+offs];
  setnz(y);
}

function ldy_inc(addr,offs=0) {
  ldy(addr,offs);
  inc(addr,offs);
}

function lsr_a() {
  setc(a & 1);
  a >>= 1;
  setnz(a);
}

function lsr(addr) {
  const old = mem8[addr];
  setc(old & 1);
  const new_ = old >> 1;
  mem8[addr] = new_;
  setnz(new_);
}

function mvy(imm, addr) {
  imm &= 0xff;
  mem8[addr] = y = imm;
}

function ora(imm) {
  imm &= 0xff;
  a |= imm;
  setnz(a);
}

function pha() {
  stack.push(a);
}

function php() {
  stack.push(p);
}

function plp() {
  p = stack.pop();
}

function pla() {
  a = stack.pop();
  setnz(a);
}

function rol_a() {
  const oldc = cs();
  setc(a & 0x80);
  a = ((a << 1) | oldc) & 0xff;
  setnz(a);
}

function rol(addr) {
  const old = mem8[addr];
  const oldc = cs();
  setc(old & 0x80);
  const new_ = (((old << 1) | oldc)) & 0xff;
  setnz(new_);
  mem8[addr] = new_;
}

function ror_a() {
  const oldc = cs() ? 0x80 : 0;
  setc(a & 0x01);
  a = ((a >> 1) | oldc) & 0xff;
  setnz(a);
}

function ror(addr) {
  const old = mem8[addr];
  const oldc = cs() ? 0x80 : 0;
  setc(old & 0x01);
  const new_ = (((old >> 1) | oldc)) & 0xff;
  setnz(new_);
  mem8[addr] = new_;
}

function sbc(addr,offs=0) {
  const old = mem8[addr+offs];
  const sum = a - old - cc();
  a = sum & 0xff;
  setnz(a);
  setc(sum >= 0);
}

function sec() {
  setc(1);
}

function stx(addr) {
  mem8[addr] = x;
}

function sty(addr) {
  mem8[addr] = y;
}

function sta(addr,offs=0) {
  mem8[addr+offs] = a;
}

function sub(addr,offs=0) {
  sec();
  sbc(addr, offs);
}

function tax() {
  x = a;
  setnz(x);
}

function tay() {
  y = a;
  setnz(y);
}

function txa() {
  a = x;
  setnz(a);
}

function tya() {
  a = y;
  setnz(a);
}

function eq() { return (p & Z) ? 1 : 0; }
function ne() { return (p & Z) ? 0 : 1; }
function cs() { return (p & C) ? 1 : 0; }
function cc() { return (p & C) ? 0 : 1; }
function pl() { return (p & N) ? 0 : 1; }
function mi() { return (p & N) ? 1 : 0; }

function beq(l) { if (eq()) { label = l; return true; } else return false; }
function bne(l) { if (ne()) { label = l; return true; } else return false; }
function bcs(l) { if (cs()) { label = l; return true; } else return false; }
function bcc(l) { if (cc()) { label = l; return true; } else return false; }
function bpl(l) { if (pl()) { label = l; return true; } else return false; }

function seq(f) { if (!eq()) f(); }
function sne(f) { if (!ne()) f(); }
function scs(f) { if (!cs()) f(); }

function rne(f) { do { f(); } while (ne()); }


function assert(cond) {
  if (!cond) { throw 'error!'; }
}

///////////////////////////////////////////////////////////////////////////////

const inflate_blockLoop = 0;
const inflateStored_copyByte = 1;
const inflateStored_firstByte = 2;
const inflate_nextBlock = 3;
const inflateCompressed = 4;
const inflateCompressed_setCodeLengths = 5;
const inflateCompressed_setLiteralCodeLength = 6;
const inflateCompressed_setControlCodeLength = 7;
const inflateDynamic_decodeLength = 8;
const inflateDynamic_repeatLast = 9;
const inflateDynamic_verbatimLength = 10;
const inflateDynamic_storeLength = 11;
const inflateDynamic_storeNext = 12;
const inflateDynamic_controlSymbolCodeLength = 13;
const inflateDynamic_storeControl = 14;
const inflateCodes = 15;
const inflateCodes_literal = 16;
const inflateCodes_loop = 17;
const inflateCodes_setSequenceLength = 18;
const inflateCodes_setOffsetLowByte = 19;
const inflateCodes_setOffsetHighByte = 20;
const inflateCodes_copyByte = 21;

const buildTempHuffmanTree = 22;
const inflateDynamic_getHeader = 23;
const inflateDynamic_getTempCodeLengths = 24;
const buildHuffmanTree = 25;
const buildHuffmanTree_countCodeLengths = 26;
const buildHuffmanTree_noControlSymbol = 27;
const buildHuffmanTree_calculateOffsets = 28;
const buildHuffmanTree_assignCode = 29;
const buildHuffmanTree_noControlSymbol2 = 30;

const fetchPrimaryCode = 31;
const fetchCode = 32;
const fetchCode_nextBit = 33;
const fetchCode_allLiterals = 34;
const fetchCode_ge256 = 35;
const fetchCode_notLiteral = 36;

const getAMinus1BitsMax8 = 37;
const getBits = 38;
const getBits_normalizeLoop = 39;

const getWord = 40;
const getByte = 41;
const getBits_loop = 42;

const getBit = 43;
const getBit_return = 44;

const copyByte = 45;
const storeByte = 46;
const storeByte_return = 47;

// Uncompress DEFLATE stream starting from the address stored in inputPointer
// to the memory starting from the address stored in outputPointer
function inflate() {
  label = inflate_blockLoop;
  mvy(0, getBit_buffer);
  while (true) { switch (label) {
case inflate_blockLoop:
  // Get a bit of EOF and two bits of block type
  assert(y == 0);
  sty(getBits_base);
  lda_imm(GET_3_BITS);
  jsr(getBits);
  lsr_a();
  php();
  if (bne(inflateCompressed)) continue;

  // Copy uncompressed block
  assert(y == 0);
  sty(getBit_buffer);  // ignore bits until byte boundary
  jsr(getWord);        // skip the length we don't need
  jsr(getWord);        // get the one's complement length
  sta(inflateStored_pageCounter);
  if (bcs(inflateStored_firstByte)) continue;
case inflateStored_copyByte:
  jsr(getByte);
  jsr(storeByte);
case inflateStored_firstByte:
  inx();
  if (bne(inflateStored_copyByte)) continue;
  inc(inflateStored_pageCounter);
  if (bne(inflateStored_copyByte)) continue;

case inflate_nextBlock:
  plp();
  if (bcc(inflate_blockLoop)) continue;
  return;

case inflateCompressed:
  // A=1: fixed block, initialize with fixed codes
  // A=2: dynamic block, start by clearing all code lengths
  // A=3: invalid compressed data, not handled in this routine
  eor(2);

  assert(y == 0);
case inflateCompressed_setCodeLengths:
  tax();
  if (beq(inflateCompressed_setLiteralCodeLength)) continue;
  // fixed Huffman literal codes:
  // :144 dta 8
  // :112 dta 9
  lda_imm(4);
  cpy_imm(144);
  rol_a();
case inflateCompressed_setLiteralCodeLength:
  sta(literalSymbolCodeLength,y);
  if (beq(inflateCompressed_setControlCodeLength)) continue;
  // fixed Huffman control codes:
  // :24  dta 7
  // :6   dta 8
  // :2   dta 8 ; meaningless codes
  // :30  dta 5+DISTANCE_TREE
  lda_imm(5+DISTANCE_TREE);
  cpy_imm(LENGTH_SYMBOLS);
  if (bcs(inflateCompressed_setControlCodeLength)) continue;
  cpy_imm(24);
  adc_imm(2-DISTANCE_TREE);
case inflateCompressed_setControlCodeLength:
  cpy_imm(CONTROL_SYMBOLS);
  scs(() => sta(controlSymbolCodeLength,y));
  iny();
  if (bne(inflateCompressed_setCodeLengths)) continue;

  tax();
  if (bne(inflateCodes)) continue;

  // Decompress a block reading Huffman trees first

  // Build the tree for temporary codes
  jsr(buildTempHuffmanTree);

  // Use temporary codes to get lengths of literal/length and distance codes
  assert(x == 0);
  assert(cs());
case inflateDynamic_decodeLength:
  // C=1: literal codes
  // C=0: control codes
  stx(inflateDynamic_symbol);
  php();
  // Fetch a temporary code
  jsr(fetchPrimaryCode);
  // Temporary code 0..15: put this length
  if (bpl(inflateDynamic_verbatimLength)) continue;
  // Temporary code 16: repeat last length 3 + getBits(2) times
  // Temporary code 17: put zero length 3 + getBits(3) times
  // Temporary code 18: put zero length 11 + getBits(7) times
  tax();
  jsr(getBits);
  cpx_imm(GET_3_BITS);
  if (bcc(inflateDynamic_repeatLast)) continue;
  seq(() => adc_imm(7));
  assert(y == 0);
  sty(inflateDynamic_lastLength);
case inflateDynamic_repeatLast:
  tay();
  lda(inflateDynamic_lastLength);
  iny(); iny();
case inflateDynamic_verbatimLength:
  iny();
  plp();
  ldx(inflateDynamic_symbol);
case inflateDynamic_storeLength:
  if (bcc(inflateDynamic_controlSymbolCodeLength)) continue;
  sta(literalSymbolCodeLength,x); inx();
  cpx_imm(1);
case inflateDynamic_storeNext:
  dey();
  if (bne(inflateDynamic_storeLength)) continue;
  sta(inflateDynamic_lastLength);
  if (beq(inflateDynamic_decodeLength)) continue;
case inflateDynamic_controlSymbolCodeLength:
  cpx(inflateDynamic_primaryCodes);
  if (bcc(inflateDynamic_storeControl)) continue;
  // the code lengths we skip here were zero-initialized
  // in inflateCompressed_setControlCodeLength
  sne(() => ldx_imm(LENGTH_SYMBOLS));
  ora(DISTANCE_TREE);
case inflateDynamic_storeControl:
  sta(controlSymbolCodeLength,x); inx();
  cpx(inflateDynamic_allCodes);
  if (bcc(inflateDynamic_storeNext)) continue;
  dey();
  assert(y == 0);

  console.log(mem8.slice(literalSymbolCodeLength,literalSymbolCodeLength+256));
  console.log(mem8.slice(controlSymbolCodeLength,controlSymbolCodeLength+CONTROL_SYMBOLS));

  // Decompress a block
case inflateCodes:
  jsr(buildHuffmanTree);
  if (beq(inflateCodes_loop)) continue;
case inflateCodes_literal:
  jsr(storeByte);
case inflateCodes_loop:
  jsr(fetchPrimaryCode);
  if (bcc(inflateCodes_literal)) continue;
  if (beq(inflate_nextBlock)) continue;
  // Copy sequence from look-behind buffer
  assert(y == 0);
  sty(getBits_base);
  cmp_imm(9);
  if (bcc(inflateCodes_setSequenceLength)) continue;
  tya();
  assert(a == 0);
  cpx_imm(1+28);
  if (bcs(inflateCodes_setSequenceLength)) continue;
  dex();
  txa();
  lsr_a();
  ror(getBits_base);
  inc(getBits_base);
  lsr_a();
  rol(getBits_base);
  jsr(getAMinus1BitsMax8);
  assert(cs());
  adc_imm(0);
case inflateCodes_setSequenceLength:
  sta(inflateCodes_lengthMinus2);
  ldx_imm(DISTANCE_TREE);
  jsr(fetchCode);
  cmp_imm(4);
  if (bcc(inflateCodes_setOffsetLowByte)) continue;
  inc(getBits_base);
  lsr_a();
  jsr(getAMinus1BitsMax8);
case inflateCodes_setOffsetLowByte:
  eor(0xff);
  sta(inflateCodes_sourcePointer);
  lda(getBits_base);
  cpx_imm(10);
  if (bcc(inflateCodes_setOffsetHighByte)) continue;
  lda(getNPlus1Bits_mask-10,x);
  jsr(getBits);
  clc();
case inflateCodes_setOffsetHighByte:
  eor(0xff);
  assert(cc());
  adc(outputPointer+1);
  sta(inflateCodes_sourcePointer+1);
  jsr(copyByte);
  jsr(copyByte);
case inflateCodes_copyByte:
  jsr(copyByte);
  dec(inflateCodes_lengthMinus2);
  if (bne(inflateCodes_copyByte)) continue;
  if (beq(inflateCodes_loop)) continue;
  return;

  default: throw 'error!';
  } break; }
}

function F_buildTempHuffmanTree(l) {
  label = l;
  while (true) { switch (label) {
case buildTempHuffmanTree:
  assert(y == 0);
  // numberOfPrimaryCodes = 257 + getBits(5)
  // numberOfDistanceCodes = 1 + getBits(5)
  // numberOfTemporaryCodes = 4 + getBits(4)
  ldx_imm(3);
case inflateDynamic_getHeader:
  lda(inflateDynamic_headerBits-1,x);
  jsr(getBits);
  assert(cs());
  adc(inflateDynamic_headerBase-1,x);
  sta(inflateDynamic_tempCodes-1,x);
  dex();
  if (bne(inflateDynamic_getHeader)) continue;

// Get lengths of temporary codes in the order stored in inflateDynamic_tempSymbols
  assert(x == 0);
case inflateDynamic_getTempCodeLengths:
  lda_imm(GET_3_BITS);
  jsr(getBits);
  ldy(inflateDynamic_tempSymbols,x);
  sta(literalSymbolCodeLength,y);
  ldy_imm(0);
  inx();
  cpx(inflateDynamic_tempCodes);
  if (bcc(inflateDynamic_getTempCodeLengths)) continue;

  // Build Huffman trees basing on code lengths (in bits)
  // stored in the *SymbolCodeLength arrays
case buildHuffmanTree:
  // Clear nBitCode_literalCount, nBitCode_controlCount
  tya();
  assert(a == 0);
  rne(() => { sta(nBitCode_clearFrom,y); iny(); });
  // Count number of codes of each length
  assert(y == 0);
case buildHuffmanTree_countCodeLengths:
  ldx(literalSymbolCodeLength,y);
  inc(nBitCode_literalCount,x);
  sne(() => stx(allLiteralsCodeLength));
  cpy_imm(CONTROL_SYMBOLS);
  if (bcs(buildHuffmanTree_noControlSymbol)) continue;
  ldx(controlSymbolCodeLength,y);
  inc(nBitCode_controlCount,x);
case buildHuffmanTree_noControlSymbol:
  iny();
  if (bne(buildHuffmanTree_countCodeLengths)) continue;
// Calculate offsets of symbols sorted by code length
  assert(a == 0);
  ldx_imm(-4*TREE_SIZE);
case buildHuffmanTree_calculateOffsets:
  sta(nBitCode_literalOffset+4*TREE_SIZE-0x100,x);
  add(nBitCode_literalCount+4*TREE_SIZE-0x100,x);
  inx();
  if (bne(buildHuffmanTree_calculateOffsets)) continue;
  // Put symbols in their place in the sorted array
  assert(y == 0);
case buildHuffmanTree_assignCode:
  tya();
  ldx(literalSymbolCodeLength,y);
  ldy_inc(nBitCode_literalOffset,x);
  sta(codeToLiteralSymbol,y);
  tay();
  cpy_imm(CONTROL_SYMBOLS);
  if (bcs(buildHuffmanTree_noControlSymbol2)) continue;
  ldx(controlSymbolCodeLength,y);
  ldy_inc(nBitCode_controlOffset,x);
  sta(codeToControlSymbol,y);
  tay();
case buildHuffmanTree_noControlSymbol2:
  iny();
  if (bne(buildHuffmanTree_assignCode)) continue;
  return;

  default: throw 'error!';
  } break; }
}

function F_fetchPrimaryCode(l) {
  label = l;
  while (true) { switch (label) {
  // Read Huffman code using the primary tree
case fetchPrimaryCode:
  ldx_imm(PRIMARY_TREE);
  // Read a code from input using the tree specified in X,
  // return low byte of this code in A,
  // return C flag reset for literal code, set for length code
case fetchCode:
  assert(y == 0);
  tya();
case fetchCode_nextBit:
  jsr(getBit);
  rol_a();
  inx();
  if (bcs(fetchCode_ge256)) continue;
  // are all 256 literal codes of this length?
  cpx(allLiteralsCodeLength);
  if (beq(fetchCode_allLiterals)) continue;
  // is it literal code of length X?
  sub(nBitCode_literalCount,x);
  if (bcs(fetchCode_notLiteral)) continue;
  // literal code
  assert(cc());
  adc(nBitCode_literalOffset,x);
  tax();
  lda(codeToLiteralSymbol,x);
case fetchCode_allLiterals:
  clc();
  return;
  // code >= 256, must be control
case fetchCode_ge256:
  assert(cs());
  sbc(nBitCode_literalCount,x);
  sec();
  // is it control code of length X?
case fetchCode_notLiteral:
  assert(cs());
  sbc(nBitCode_controlCount,x);
  if (bcs(fetchCode_nextBit)) continue;
  // control code
  assert(cc());
  adc(nBitCode_controlOffset,x);
  tax();
  lda(codeToControlSymbol,x);
  and_imm(0x1f)	 // make distance symbols zero-based
  tax();
  assert(cs());
  return;

  default: throw 'error!';
  } break; }
}

function F_getAMinus1BitsMax8(l) {
  label = l;
  while (true) { switch (label) {
  // Read A minus 1 bits, but no more than 8
case getAMinus1BitsMax8:
  rol(getBits_base);
  tax();
  cmp_imm(9);
  if (bcs(getByte)) continue;
  lda(getNPlus1Bits_mask-2,x);
case getBits:
  jsr(getBits_loop);
case getBits_normalizeLoop:
  lsr(getBits_base);
  ror_a();
  if (bcc(getBits_normalizeLoop)) continue;
  return;

// Read 16 bits
case getWord:
  jsr(getByte);
  tax();
// Read 8 bits
case getByte:
  lda_imm(0x80);
case getBits_loop:
  jsr(getBit);
  ror_a();
  if (bcc(getBits_loop)) continue;
  return;

  default: throw 'error!';
  } break; }
}

function F_getBit(l) {
  label = l;
  while (true) { switch (label) {
  // Read one bit, return in the C flag
case getBit:
  lsr(getBit_buffer);
  if (bne(getBit_return)) continue;
  pha();
  assert(y == 0);
  lda(ind(inputPointer),y);
  inw(inputPointer);
  sec();
  ror_a();
  sta(getBit_buffer);
  pla();
case getBit_return:
  return;

  default: throw 'error!';
  } break; }
}

function F_copyByte(l) {
  label = l;
  while (true) { switch (label) {
// Copy a previously written byte
case copyByte:
  ldy(outputPointer);
  lda(ind(inflateCodes_sourcePointer),y);
  ldy_imm(0);
// Write a byte
case storeByte:
  assert(y == 0);
  sta(ind(outputPointer),y);
  inc(outputPointer);
  if (bne(storeByte_return)) continue;
  inc(outputPointer+1);
  inc(inflateCodes_sourcePointer+1);
case storeByte_return:
  return;

  default: throw 'error!';
  } break; }
}

///////////////////////////////////////////////////////////////////////////////

function org(addr) {
  loc = addr;
}

function dta(arr) {
  const oldloc = loc;
  for (let x of arr) {
    mem8[loc++] = x;
  }
  return oldloc;
}

function org_plus(n) {
  const oldloc = loc;
  loc += n;
  return oldloc;
}

org(inflate_addr);

const getNPlus1Bits_mask = dta([
  GET_1_BIT,GET_2_BITS,GET_3_BITS,GET_4_BITS,GET_5_BITS,GET_6_BITS,GET_7_BITS]);

const inflateDynamic_tempSymbols = dta([
  GET_2_BITS,GET_3_BITS,GET_7_BITS,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);

const inflateDynamic_headerBits = dta([
  GET_4_BITS,GET_5_BITS,GET_5_BITS]);

const inflateDynamic_headerBase = dta([
  3,LENGTH_SYMBOLS,0]);

org(inflate_data);

// Data for building trees

const literalSymbolCodeLength = org_plus(256);
const controlSymbolCodeLength = org_plus(CONTROL_SYMBOLS);

// Huffman trees

const nBitCode_literalCount = org_plus(2*TREE_SIZE);
const nBitCode_clearFrom = nBitCode_literalCount;

const nBitCode_controlCount = org_plus(2*TREE_SIZE);
const nBitCode_literalOffset = org_plus(2*TREE_SIZE);
const nBitCode_controlOffset = org_plus(2*TREE_SIZE);
const allLiteralsCodeLength = org_plus(1);

const codeToLiteralSymbol = org_plus(256);
const codeToControlSymbol = org_plus(CONTROL_SYMBOLS);

///////////////////////////////////////////////////////////////////////////////

inflate_py_gz = [
  0x8d, 0x58, 0x7b,
  0x6f, 0xda, 0x48, 0x10, 0xff, 0xdf, 0x9f, 0x62, 0x7b, 0x95, 0x6a, 0xfb,
  0x42, 0x08, 0x36, 0x38, 0x40, 0x94, 0x44, 0x4a, 0x9b, 0xdc, 0x5d, 0xa4,
  0xde, 0x43, 0x4d, 0x4e, 0x3a, 0x89, 0x5a, 0x96, 0xc1, 0x4b, 0x70, 0x0b,
  0x6b, 0x64, 0x9b, 0x96, 0x5c, 0x2e, 0xf7, 0xd9, 0x6f, 0x66, 0xf6, 0xe1,
  0x35, 0x90, 0xf6, 0x24, 0x03, 0xde, 0x9d, 0x99, 0xdf, 0xbc, 0xf7, 0xc1,
  0xeb, 0x57, 0x27, 0x9b, 0xaa, 0x3c, 0x99, 0xe6, 0xe2, 0x84, 0x8b, 0x2f,
  0x6c, 0xfd, 0x58, 0x2f, 0x0a, 0xe1, 0x38, 0xf9, 0x6a, 0x5d, 0x94, 0x35,
  0x4b, 0xcb, 0x87, 0x75, 0x5a, 0x56, 0x5c, 0x8f, 0xab, 0xc7, 0xca, 0x71,
  0x7e, 0xbd, 0xfa, 0xeb, 0xed, 0xed, 0xfd, 0x1d, 0xbb, 0x60, 0x41, 0x84,
  0x83, 0x77, 0xef, 0xdf, 0xfd, 0x7e, 0x7d, 0x43, 0xe3, 0x31, 0x8e, 0xcd,
  0x30, 0x1c, 0x9d, 0xe2, 0xf8, 0x5a, 0x8f, 0xfb, 0x3d, 0xe7, 0xa7, 0x5b,
  0x9b, 0x3c, 0x72, 0x70, 0xe2, 0xe6, 0x3a, 0x79, 0x7f, 0x7b, 0x9f, 0xbc,
  0xbf, 0xf9, 0x0d, 0x67, 0x27, 0xa3, 0x98, 0xfd, 0xc8, 0x82, 0xc1, 0x80,
  0x1d, 0xb1, 0xc9, 0x98, 0xde, 0x83, 0x10, 0xdf, 0x87, 0xf8, 0x1e, 0xd2,
  0x34, 0xb1, 0x8c, 0x94, 0xec, 0xf5, 0xed, 0x5d, 0x23, 0x1c, 0x21, 0xa5,
  0x1f, 0x3a, 0xa8, 0x03, 0xe6, 0x10, 0x98, 0xe6, 0x83, 0xd3, 0x0e, 0x0b,
  0x86, 0xf0, 0x19, 0x75, 0x58, 0xaf, 0xc3, 0xe0, 0x1b, 0x06, 0xe3, 0x0e,
  0xc3, 0x69, 0x18, 0x47, 0xf0, 0x13, 0x74, 0xd8, 0x00, 0x7e, 0xc2, 0x0e,
  0xeb, 0xc3, 0x0f, 0x7c, 0xe0, 0x2d, 0xc0, 0x19, 0x78, 0xa2, 0xd8, 0x01,
  0xb4, 0x9f, 0xef, 0x7f, 0x49, 0xde, 0x5e, 0xdd, 0xdd, 0x20, 0x60, 0x9f,
  0xb8, 0x23, 0x42, 0x18, 0x12, 0xe0, 0x58, 0x42, 0x21, 0x0e, 0x4a, 0x07,
  0x91, 0xd2, 0x08, 0xf3, 0x21, 0xa2, 0xc1, 0x7b, 0x1f, 0x68, 0x7d, 0x98,
  0x1f, 0xc0, 0x38, 0x82, 0xf7, 0x08, 0x2d, 0x40, 0x69, 0x18, 0x8f, 0x51,
  0x9e, 0x84, 0x90, 0x2b, 0x38, 0x45, 0x88, 0x31, 0x0c, 0x43, 0x14, 0x0c,
  0xa3, 0x51, 0xec, 0x90, 0xa3, 0x5a, 0x7f, 0x40, 0xf6, 0x19, 0x2b, 0xa4,
  0x37, 0xa4, 0x97, 0xd8, 0x81, 0x84, 0x34, 0xc4, 0x87, 0xf7, 0x31, 0xda,
  0x11, 0x22, 0xc3, 0x18, 0x2d, 0x89, 0xd0, 0x94, 0x51, 0x84, 0x36, 0xc0,
  0x70, 0x78, 0x4a, 0x96, 0xa3, 0x4c, 0x10, 0xf5, 0x51, 0xba, 0x87, 0x72,
  0xfd, 0xde, 0x10, 0x11, 0x7a, 0x28, 0x7b, 0x1a, 0x0c, 0x80, 0x3a, 0x22,
  0xe9, 0x20, 0x0c, 0x47, 0x63, 0x32, 0x10, 0x11, 0xc2, 0x41, 0x34, 0x1c,
  0xc6, 0xce, 0xcd, 0x5f, 0xf7, 0x1f, 0xae, 0x12, 0x1d, 0x22, 0x15, 0xf3,
  0x1e, 0x85, 0x7a, 0xff, 0x09, 0xac, 0x27, 0xb4, 0x9e, 0xbe, 0xf5, 0x0c,
  0xac, 0x27, 0xb2, 0x9e, 0x9e, 0xd6, 0x25, 0x83, 0x71, 0x40, 0x93, 0x8d,
  0x6b, 0x63, 0x45, 0x3a, 0x5b, 0x32, 0x61, 0x32, 0x67, 0x32, 0x6d, 0x3a,
  0x73, 0x3a, 0x7b, 0x81, 0x2c, 0x03, 0xfa, 0x50, 0x2d, 0xc4, 0x8e, 0xe3,
  0xcc, 0x96, 0x69, 0x55, 0xb1, 0x5f, 0x36, 0xf3, 0xf9, 0x2a, 0x15, 0x5e,
  0x31, 0xfd, 0xc4, 0x67, 0xb5, 0x7f, 0xe6, 0x30, 0x96, 0xf1, 0x39, 0x4b,
  0x92, 0x5c, 0xe4, 0x75, 0x92, 0x78, 0x15, 0x5f, 0xce, 0x3b, 0x6c, 0xc9,
  0x45, 0xd5, 0x61, 0xab, 0x74, 0x5b, 0x3d, 0xae, 0x2a, 0x62, 0x62, 0xec,
  0x35, 0x9b, 0x6e, 0xf2, 0x65, 0xc6, 0x66, 0xc5, 0x46, 0xd4, 0x34, 0x83,
  0xbc, 0x5d, 0x1a, 0x92, 0x0f, 0x58, 0xb9, 0xaa, 0xb5, 0x88, 0x3c, 0x2f,
  0x4a, 0xb6, 0x64, 0xb9, 0x20, 0x34, 0x89, 0x61, 0xcb, 0x4c, 0x96, 0x31,
  0x3b, 0x82, 0x96, 0x73, 0x5a, 0xe8, 0xc5, 0x7c, 0x5e, 0x71, 0x09, 0x8f,
  0xaf, 0x3a, 0x38, 0xb1, 0x41, 0xcc, 0x11, 0xb1, 0x4c, 0xc5, 0x03, 0xf7,
  0xc0, 0x4d, 0xa5, 0xcf, 0xd7, 0xf0, 0x28, 0xd3, 0x4d, 0xd7, 0x6b, 0x2e,
  0x32, 0x0f, 0xdf, 0x27, 0x39, 0x28, 0xb1, 0x95, 0xe6, 0xb1, 0xef, 0xec,
  0xb8, 0x93, 0x71, 0x76, 0x7c, 0x09, 0x2b, 0xc3, 0x6a, 0x5a, 0x2c, 0x1b,
  0xbf, 0xe4, 0xd8, 0x38, 0xa6, 0x62, 0xd1, 0x98, 0xd1, 0x91, 0xbe, 0x71,
  0xb1, 0x59, 0xf1, 0x32, 0xad, 0xb9, 0x87, 0x5e, 0x1a, 0x3b, 0xf2, 0x39,
  0x90, 0x5f, 0x5d, 0xb0, 0x9e, 0x9e, 0x68, 0xa1, 0x4e, 0xc8, 0xb4, 0x65,
  0x1c, 0x03, 0x7c, 0x6e, 0x18, 0xd4, 0xa4, 0x0a, 0x8a, 0xca, 0xd7, 0xad,
  0x98, 0x2f, 0x01, 0xbd, 0xfc, 0x4e, 0xc2, 0xb2, 0xb4, 0x4e, 0x95, 0x72,
  0xd2, 0x93, 0x8b, 0xf5, 0x06, 0xb3, 0x82, 0xf3, 0x10, 0x80, 0xa9, 0xfb,
  0xb1, 0xf7, 0xb1, 0xe7, 0xa2, 0xd7, 0x77, 0x05, 0xfb, 0xca, 0xd9, 0x2c,
  0x85, 0x20, 0xf2, 0x34, 0x63, 0x29, 0x5b, 0xe6, 0x75, 0xbd, 0xe4, 0x6c,
  0x9d, 0x56, 0x35, 0xab, 0x17, 0x1c, 0x3c, 0xca, 0x54, 0x80, 0x1e, 0xfe,
  0xce, 0xd7, 0x6c, 0x01, 0x5c, 0xbc, 0xa4, 0x19, 0xb0, 0x87, 0x97, 0xb5,
  0xd7, 0x28, 0xc0, 0xd0, 0x5c, 0x80, 0x93, 0xdb, 0x60, 0xee, 0xbf, 0xc0,
  0x11, 0x28, 0x8e, 0xd1, 0xf4, 0x25, 0x8e, 0x50, 0x71, 0xf4, 0x46, 0x2a,
  0x33, 0xe0, 0xf0, 0x03, 0x26, 0xde, 0xe2, 0xe9, 0xcb, 0xfc, 0x2f, 0xd2,
  0x2a, 0xa9, 0xf9, 0x16, 0x1d, 0xf3, 0x24, 0xd7, 0x1b, 0x16, 0xf8, 0x14,
  0x67, 0x43, 0x9f, 0x95, 0xb3, 0xe0, 0xd4, 0x66, 0x08, 0x77, 0x18, 0x40,
  0xbe, 0x4c, 0x6d, 0x86, 0xc1, 0x0e, 0x83, 0x48, 0x57, 0xdc, 0xa6, 0x8f,
  0x76, 0x35, 0x14, 0xab, 0x15, 0x17, 0x2d, 0x23, 0x20, 0x02, 0x3d, 0xc5,
  0x65, 0x7b, 0x29, 0x8a, 0xda, 0xd8, 0xec, 0x1f, 0x22, 0x90, 0xb1, 0x07,
  0x29, 0x64, 0xe5, 0x61, 0x19, 0xa9, 0x5e, 0x05, 0x8b, 0x82, 0x34, 0x85,
  0x4a, 0xc8, 0xb3, 0x2d, 0x58, 0x34, 0xea, 0x61, 0xe2, 0xae, 0xe6, 0x50,
  0x31, 0x94, 0x4c, 0x95, 0x3d, 0x47, 0xd5, 0xa4, 0x76, 0x4f, 0x57, 0xe5,
  0xd7, 0x45, 0x0e, 0xa9, 0xb7, 0x02, 0xdd, 0x82, 0x3b, 0x39, 0x61, 0xb0,
  0x51, 0x1d, 0xa8, 0x62, 0xcd, 0x00, 0x95, 0x3a, 0x72, 0x5e, 0x9a, 0x6f,
  0xcc, 0x2b, 0x36, 0xb5, 0xac, 0xc6, 0x49, 0xec, 0xa8, 0xf2, 0x55, 0x65,
  0x4d, 0x75, 0xa0, 0xea, 0xd6, 0xb2, 0xe5, 0x03, 0x58, 0xfd, 0x76, 0x59,
  0xcc, 0x3e, 0x7b, 0xa6, 0xa1, 0xa0, 0x3c, 0x65, 0xf3, 0x95, 0xbc, 0xde,
  0x94, 0xc2, 0x06, 0xd6, 0x98, 0x24, 0x95, 0xd7, 0x95, 0x6a, 0x09, 0xa1,
  0x64, 0xa7, 0x8f, 0x35, 0x57, 0xd1, 0xd9, 0xf3, 0x4e, 0x32, 0x98, 0xe8,
  0xb5, 0xe8, 0x6f, 0xd8, 0x90, 0xc8, 0xd4, 0x42, 0xad, 0x6a, 0xd4, 0x88,
  0x71, 0x43, 0xff, 0xe7, 0x20, 0x03, 0x74, 0x1e, 0xd4, 0xff, 0xf9, 0xb9,
  0x52, 0xf4, 0x6d, 0xce, 0x90, 0x38, 0x83, 0xd3, 0x86, 0xf5, 0xf2, 0xf2,
  0x42, 0x1b, 0xd7, 0x4c, 0xbe, 0x81, 0xb2, 0xf3, 0x02, 0x64, 0x15, 0x3e,
  0x3b, 0x86, 0xf2, 0x77, 0x0e, 0x85, 0x5f, 0xa8, 0x16, 0x5e, 0x97, 0xb9,
  0xa8, 0xbd, 0xb9, 0x6b, 0x62, 0xf3, 0x24, 0x9e, 0x7d, 0x76, 0x71, 0xc9,
  0x9e, 0x10, 0xec, 0xd9, 0xf5, 0xed, 0x98, 0xe2, 0x54, 0x2b, 0x98, 0x94,
  0x02, 0x2b, 0x45, 0xd3, 0x79, 0x2e, 0xd2, 0xa5, 0x0e, 0x86, 0xc1, 0x54,
  0x36, 0x4c, 0xeb, 0xc7, 0x35, 0xdf, 0x23, 0x86, 0xbe, 0xa9, 0x3e, 0xc5,
  0x80, 0xf5, 0x84, 0xb6, 0x6d, 0x04, 0x94, 0xf2, 0xba, 0xe4, 0x50, 0xde,
  0xd9, 0xa1, 0x2a, 0x02, 0x47, 0xdb, 0x6e, 0xb1, 0xa1, 0x0f, 0x59, 0xf9,
  0x77, 0x88, 0xc2, 0xe9, 0x32, 0x7f, 0x10, 0x4a, 0x0a, 0x56, 0xde, 0x64,
  0xdf, 0x28, 0xd5, 0x57, 0x8c, 0x89, 0xef, 0xd0, 0xad, 0x52, 0xea, 0x42,
  0xdb, 0xe1, 0xd6, 0x61, 0x2f, 0x71, 0x67, 0x28, 0x1e, 0xfb, 0x2f, 0xd4,
  0x39, 0x61, 0xff, 0x68, 0xda, 0x40, 0x45, 0x12, 0x7b, 0x55, 0x06, 0x8b,
  0xe6, 0xf9, 0xd2, 0xf6, 0x3e, 0x20, 0xef, 0xe7, 0xf9, 0x96, 0x67, 0x6c,
  0x21, 0xb7, 0x63, 0xed, 0x08, 0xe0, 0xe2, 0x0c, 0x03, 0x6b, 0xf5, 0x46,
  0xdd, 0x3e, 0x5f, 0x76, 0x98, 0x39, 0x80, 0x6a, 0x8b, 0xb2, 0xbc, 0x52,
  0x52, 0xbb, 0x42, 0xe6, 0x60, 0x49, 0xfb, 0xe4, 0xb5, 0x25, 0xd5, 0x36,
  0x28, 0x24, 0x83, 0xb2, 0x47, 0x58, 0x19, 0xf2, 0xd9, 0x8e, 0x49, 0x0b,
  0xb0, 0x69, 0x2f, 0x76, 0x91, 0x8f, 0xf5, 0x1a, 0x0d, 0x35, 0x0f, 0x9a,
  0x70, 0x98, 0x29, 0xd0, 0x2c, 0x33, 0x08, 0xd4, 0x1e, 0xcb, 0x00, 0x59,
  0x06, 0x4d, 0x16, 0x2b, 0xfb, 0x1c, 0xa1, 0x4e, 0xe5, 0x8a, 0xba, 0xb3,
  0xf5, 0x13, 0x9e, 0xdf, 0x2c, 0x4b, 0x28, 0x3c, 0xb1, 0xcf, 0xcc, 0xb0,
  0xd1, 0xc7, 0x7b, 0xfa, 0xfa, 0x3a, 0x66, 0xb8, 0xe9, 0x63, 0xe6, 0x76,
  0xc2, 0x26, 0x8f, 0x3d, 0x8d, 0x6e, 0x55, 0xba, 0x94, 0x98, 0x2a, 0x41,
  0x2f, 0x2b, 0x1b, 0xf3, 0x1d, 0xa0, 0xbc, 0x07, 0x11, 0xcf, 0x86, 0xeb,
  0xc8, 0x90, 0x1d, 0xc9, 0xa8, 0xf8, 0xbb, 0x99, 0xb5, 0x94, 0x19, 0xcc,
  0xc9, 0x19, 0x8a, 0xc4, 0xa4, 0xf9, 0xfb, 0xb9, 0xb5, 0xe4, 0x50, 0xec,
  0x2c, 0x3e, 0x90, 0xdd, 0x8a, 0x53, 0x4a, 0xa1, 0xb7, 0x78, 0xf9, 0xc5,
  0x74, 0x97, 0xda, 0x48, 0x7e, 0x4a, 0x81, 0xae, 0x5c, 0x93, 0x8b, 0xee,
  0x7d, 0xb9, 0x31, 0x5b, 0x02, 0x9d, 0x87, 0x76, 0x9c, 0xf4, 0xb4, 0xf9,
  0x7e, 0x73, 0xbc, 0x21, 0xbe, 0x73, 0xa8, 0x82, 0xd3, 0x9d, 0xcd, 0x41,
  0x75, 0x92, 0x3a, 0x84, 0x21, 0x9b, 0x6f, 0x18, 0xf4, 0x72, 0x74, 0x79,
  0xc9, 0x7e, 0x97, 0x9b, 0x82, 0xf7, 0x54, 0xf2, 0x75, 0xe9, 0xcd, 0x16,
  0xa5, 0x64, 0xf5, 0x9f, 0x7d, 0x57, 0xf3, 0x53, 0x95, 0x4a, 0x7b, 0x2e,
  0xda, 0x8a, 0x2c, 0x9c, 0xbb, 0xba, 0x58, 0xbb, 0x8d, 0x86, 0x29, 0x9c,
  0x6a, 0x3e, 0x1b, 0xf9, 0x8a, 0xdb, 0x25, 0xa2, 0x36, 0xfe, 0x76, 0x4d,
  0xec, 0x9d, 0xfc, 0x27, 0xf2, 0x44, 0x88, 0xf5, 0x1d, 0xfb, 0x76, 0x81,
  0x3d, 0xd4, 0x0b, 0x90, 0xb6, 0xae, 0x51, 0x36, 0x27, 0x24, 0x5c, 0x2a,
  0x30, 0x12, 0xd9, 0xc1, 0x48, 0x9a, 0x8c, 0x36, 0xd0, 0xd9, 0xb7, 0x0c,
  0x33, 0xd7, 0x84, 0x09, 0xe1, 0x59, 0x16, 0xa9, 0xa6, 0x33, 0x97, 0x2a,
  0xc5, 0x00, 0x86, 0x64, 0x6d, 0x43, 0x76, 0x5a, 0x47, 0x7a, 0x62, 0xf5,
  0xce, 0xc1, 0xbc, 0x59, 0x53, 0x93, 0x63, 0x54, 0x15, 0xef, 0x65, 0xf1,
  0x07, 0x88, 0xfe, 0x07, 0xd8, 0x2a, 0xbc, 0x27, 0xa4, 0x3f, 0x77, 0xd8,
  0x93, 0x84, 0xc6, 0x0d, 0x86, 0xc9, 0xb4, 0xba, 0x6e, 0xf7, 0x53, 0x91,
  0x0b, 0x6f, 0x95, 0xae, 0x31, 0xc5, 0x1d, 0xd6, 0x82, 0x95, 0xec, 0x67,
  0xb1, 0x0f, 0x59, 0xff, 0x41, 0x15, 0xe4, 0xfe, 0x02, 0x6a, 0x6d, 0x48,
  0x14, 0x41, 0xb9, 0xbb, 0xab, 0x55, 0x4a, 0xb9, 0xa1, 0x42, 0x2d, 0xcf,
  0x68, 0xf3, 0xbc, 0xa4, 0xc8, 0xc8, 0x51, 0x2e, 0x20, 0x1c, 0x0d, 0xed,
  0xa5, 0x1b, 0xc4, 0x51, 0xe0, 0xb7, 0x3a, 0xe0, 0x9f, 0x17, 0x36, 0x39,
  0xc6, 0xf4, 0x85, 0x47, 0x59, 0x60, 0xee, 0x15, 0x3b, 0xad, 0x71, 0xac,
  0x18, 0xcf, 0xa5, 0x3d, 0x56, 0x93, 0x3c, 0xae, 0x2c, 0x69, 0x75, 0x21,
  0x90, 0x56, 0x1e, 0x31, 0x4f, 0xc9, 0x92, 0x8c, 0x1f, 0x33, 0x23, 0xd5,
  0xde, 0xca, 0x29, 0x10, 0x72, 0x1f, 0x07, 0x80, 0x67, 0xbb, 0x8b, 0x60,
  0xdc, 0x6a, 0xa2, 0xe6, 0xc4, 0x04, 0x7a, 0xb5, 0x8d, 0x52, 0xdb, 0x85,
  0x75, 0x97, 0xd3, 0x61, 0x3b, 0x38, 0x79, 0x7e, 0x7e, 0x61, 0x56, 0x72,
  0xd9, 0xf7, 0x66, 0xa2, 0x4c, 0xf3, 0x8a, 0xb3, 0x9b, 0xed, 0x8c, 0xaf,
  0xeb, 0xbc, 0x10, 0x9e, 0xfb, 0xa7, 0xf8, 0x2c, 0x8a, 0xaf, 0x82, 0xf8,
  0x5e, 0xb9, 0xfe, 0x6e, 0xfa, 0x68, 0xbd, 0x6c, 0xa5, 0xb0, 0x23, 0x15,
  0xaa, 0xf0, 0xc3, 0x92, 0x25, 0x0f, 0x8a, 0xcd, 0xea, 0x04, 0x65, 0xe2,
  0xc1, 0xb4, 0x0f, 0xa1, 0x24, 0x4e, 0x1d, 0xca, 0xed, 0x5e, 0x73, 0xe9,
  0xa2, 0x68, 0x52, 0xb1, 0x65, 0x78, 0xa4, 0x3a, 0xb3, 0x62, 0x61, 0xae,
  0x87, 0xdb, 0x26, 0x42, 0xb3, 0x42, 0xd4, 0xb9, 0xd8, 0x70, 0x7b, 0xdd,
  0xd9, 0xd2, 0x56, 0xdd, 0x12, 0x5d, 0x27, 0x5f, 0xe8, 0xf4, 0x03, 0x20,
  0x93, 0xe3, 0x20, 0x6e, 0x51, 0x66, 0x54, 0x13, 0x7d, 0x7d, 0xd9, 0xb4,
  0x8f, 0x3f, 0x7b, 0xa0, 0xc3, 0x43, 0xa0, 0xbd, 0xff, 0x05, 0xd7, 0x3f,
  0x00, 0x37, 0xfa, 0xbf, 0x70, 0x41, 0xb0, 0x87, 0x37, 0x34, 0x5b, 0x1c,
  0x06, 0x1e, 0x92, 0x3f, 0x51, 0x10, 0xb8, 0x09, 0x2b, 0x49, 0xbb, 0x2f,
  0x81, 0x0b, 0xae, 0xa6, 0x98, 0xd0, 0x55, 0x0a, 0x7d, 0x9d, 0x96, 0x0f,
  0xf2, 0xce, 0x4b, 0x7f, 0xb2, 0x95, 0xa0, 0x43, 0xff, 0xe1, 0xd6, 0xbd,
  0x2a, 0x1f, 0x36, 0x78, 0x4f, 0xf9, 0x83, 0x28, 0x9e, 0x6f, 0x98, 0xba,
  0x69, 0x96, 0x25, 0xa9, 0xa2, 0x7a, 0xee, 0x1c, 0x52, 0x4c, 0xc5, 0x8a,
  0x58, 0x00, 0xa0, 0x98, 0xe8, 0x07, 0xd9, 0x2a, 0xa9, 0x04, 0xcd, 0xcc,
  0xd5, 0x5d, 0x18, 0xb8, 0x9a, 0x6b, 0x31, 0xe4, 0x92, 0x38, 0xba, 0x08,
  0xd4, 0x61, 0x6e, 0x39, 0x75, 0xfd, 0x2e, 0x5e, 0x6d, 0x3d, 0x1f, 0x51,
  0xcd, 0xdd, 0x63, 0x6f, 0x29, 0xd2, 0x68, 0x5d, 0x7d, 0x17, 0xf1, 0x49,
  0x40, 0x37, 0x9a, 0x2b, 0x25, 0xdd, 0x8e, 0x82, 0x68, 0xd1, 0xa0, 0x24,
  0x5d, 0xfa, 0x97, 0xc4, 0x53, 0x44, 0xb0, 0x2f, 0xc7, 0x4b, 0x39, 0x5e,
  0xae, 0x92, 0x04, 0xd3, 0xe2, 0x26, 0x09, 0x86, 0x28, 0x49, 0x5c, 0x8c,
  0x4f, 0xf5, 0x58, 0xc1, 0xd9, 0x32, 0xaf, 0x3d, 0x0a, 0x1b, 0x8e, 0xc0,
  0xe6, 0x2f, 0x93, 0x00, 0x17, 0x3f, 0xe7, 0x3f, 0x00, 0x05, 0xf6, 0xfa,
  0xc3, 0x14, 0x00, 0x00
];

dv.setUint16(inputPointer, input_addr, true);
dv.setUint16(outputPointer, output_addr, true);
mem8.set(inflate_py_gz, input_addr);

inflate();
console.log(
  mem8.slice(output_addr, dv.getUint16(outputPointer, true)).reduce(
    (p,c) => p + String.fromCharCode(c), ''));
